<?php /* TASKS $Id: addedit.php.back,v 1.1 2009-05-19 21:15:46 pkerestezachi Exp $ */
/**
* Tasks :: Add/Edit Form
*
*/
global $dynamic_constraints, $task_constraints;
$task_id = intval( dPgetParam( $_GET, "task_id", 0 ) );
$task_parent = intval( dPgetParam( $_GET, "task_parent", 0 ) );

$defaul_task_access = 3;
$task_access = Array ( "2"=> $AppUI->_("Project Wide"), "3"=> $AppUI->_("Only Assigned"));


// load the record data
$obj = new CTask();

if (!$obj->load( $task_id ) && $task_id > 0) 
{
	$AppUI->setMsg( 'Task' );
	$AppUI->setMsg( "invalidID", UI_MSG_ERROR, true );
	$AppUI->redirect();
}

// check for a valid project parent
$task_project = intval( $obj->task_project );
if (!$task_project) 
{
	$task_project = dPgetParam( $_GET, 'task_project', 0 );
	if (!$task_project) 
	{
		$AppUI->setMsg( "badTaskProject", UI_MSG_ERROR );
		$AppUI->redirect();
	}
}

$objPrj = new CProject();
$objPrj->load($task_project, false);
$canManageRoles=$objPrj->canManageRoles();

//Obtengo los d?s feriados de la empresa
$objCpy = new CCompany();
$objCpy->load($objPrj->project_company );
$objCpy->loadHollidays();
$holliday_list = array_keys($objCpy->_hollidays);

// check permissions
if ( $task_id ) {
	// we are editing an existing task
	//$canEdit = !getDenyEdit( $m, $task_id );
	$perms=CTask::getTaskAccesses($task_id);
	$canEdit=$perms["edit"];	
	$canEditDetails = $perms["detail"] == PERM_EDIT;
	$canEditEcValues = $perms["values"] == PERM_EDIT;

} else {
	// we are trying to add a new task
	
	// do we have write access on this project?
	//$canEdit = ( !getDenyEdit( 'projects', $task_project ) );
	$canEdit = $objPrj->canAddTasks();
	$canEditDetails=$canEdit;
	$canEditEcValues=$canEdit;	
	// Asumption: if a user has write access on a project, he will also
	// be able to add tasks, files and events. There is no way for
	// allowing someone to edit a project information and not editing
	// its tasks, files and events.
	$last_task_end = db_loadResult("select max(task_end_date) from tasks where task_project=$task_project");
	// si nohay tareas cargadas tomo la fecha de inicio del project
	if($last_task_end === null)	
		$obj->task_start_date = $objPrj->project_start_date;
	else 
		$obj->task_start_date=$last_task_end;
	$obj->task_end_date=$obj->task_start_date;
	$obj->task_duration_type = 24;
}

if (!$canEdit) {
	$AppUI->redirect( "m=public&a=access_denied" );
}

//check permissions for the associated project
$canReadProject = !getDenyRead( 'projects', $obj->task_project);

$durnTypes = dPgetSysVal( 'TaskDurationType' );

///set default values for a new task
if (!$task_id){
	$obj->task_priority=10;
	$obj->task_constraint_type=3; //ASAP

}

// si la tarea tiene hijos es din?ica obligatoriamente
$is_dynamic_task = $obj->getNumberOfChildrens();

if ($is_dynamic_task){
	foreach ($task_constraints as $cid => $cname) {
		if (! (in_array($cid, explode(",", $dynamic_constraints)))){
			unset ($task_constraints[$cid]);
		}
	}
}
// check the document access (public, participant, private)
/*
if (!$obj->canAccess( $AppUI->user_id )) {
	//$AppUI->redirect( "m=public&a=access_denied" );
	echo "Can not read";
}
*/
$task_parent = isset( $obj->task_parent ) ? $obj->task_parent : $task_parent;

// format dates
$df = $AppUI->getPref('SHDATEFORMAT');

//ingreso fechas manual
$objManualDate = new CDate();

$start_date = intval( $obj->task_start_date ) ? new CDate( $obj->task_start_date ) : new CDate();
$end_date = intval( $obj->task_end_date ) ? new CDate( $obj->task_end_date ) : new CDate();
$constraint_date = intval( $obj->task_constraint_date ) ? new CDate( $obj->task_constraint_date ) : NULL;

// pull the related project
$project = new CProject();
$project->load( $task_project );

//Pull users
$sql = "
SELECT u.user_id, CONCAT_WS(' ',user_first_name,user_last_name)
FROM users u inner join project_roles pr on u.user_id = pr.user_id
WHERE pr.project_id = $task_project and pr.role_id=2 and u.user_type <>5
ORDER BY user_first_name, user_last_name
";
$users = db_loadHashList( $sql );	

if ($canManageRoles){	
	$sql = "
	SELECT u.user_id, CONCAT_WS(' ',user_first_name,user_last_name)
	FROM users u left join project_roles pr 
		on u.user_id = pr.user_id and pr.project_id=$task_project and pr.role_id=2 
	WHERE pr.user_id is null and u.user_type <>5
	ORDER BY user_first_name, user_last_name
	";
	
	$users_not_added = db_loadHashList( $sql );	
	
	$users = arrayMerge($users, $users_not_added);
}	


$sql = "
SELECT u.user_id, u.user_cost_per_hour
FROM users u inner join project_roles pr on u.user_id = pr.user_id
WHERE pr.project_id = $task_project and pr.role_id=2 and u.user_type <>5
ORDER BY user_first_name, user_last_name
";
$users_cost = db_loadHashList( $sql );	

if ($canManageRoles){	
	$sql = "
	SELECT u.user_id, u.user_cost_per_hour
	FROM users u left join project_roles pr 
		on u.user_id = pr.user_id and pr.project_id=$task_project and pr.role_id=2 
	WHERE pr.user_id is null and u.user_type <>5
	ORDER BY user_first_name, user_last_name
	";
	
	$users_not_added = db_loadHashList( $sql );	
	
	$users_cost = arrayMerge($users_cost, $users_not_added);
}	


if ( $task_id == 0 ) {
	// Add task creator to assigned users by default
	/*
	$assigned = array($AppUI->user_id => 
									array("user_first_name" => $AppUI->user_first_name,
												"user_last_name" => $AppUI->user_last_name,
												"user_units" => "100"));
												*/
	$assigned = array();											
} else {
	// Pull users on this task
	$sql = "
			 SELECT u.user_id, CONCAT_WS(' ',u.user_first_name,u.user_last_name)
			   FROM users u, user_tasks t
			 WHERE t.task_id =$task_id
			 AND t.task_id <> 0
			 AND t.user_id = u.user_id
			 and u.user_type <>5
			 ";
	$assigned = $obj->getAssignedUsers();//db_loadHashList( $sql );
}

// Pull tasks for the parent task list
/*
$sql="
SELECT task_id, task_name
FROM tasks
WHERE task_project = $task_project
	AND task_id <> $task_id
ORDER BY task_project
";


$projTasks = array( $obj->task_id => $AppUI->_('None') );
$res = db_exec( $sql );
while ($row = db_fetch_row( $res )) {

	$projTasks[$row[0]] = $row[1];
}
*/
$possible_parents = $obj->getListPosibleParents($task_project);
$possible_parents = arrayMerge( array( ($obj->task_id ? $obj->task_id :"0")  => $AppUI->_('None')), $possible_parents );

//$possible_dependences
$possible_dependences = $obj->getListPosibleDependences($task_project, ($task_parent>0?$task_parent:NULL));
$possible_dependences = arrayMerge( array( ($obj->task_id ? $obj->task_id :"0") => $AppUI->_('None')), $possible_dependences );



// Pull tasks dependencies
$sql = "
SELECT t.task_id, t.task_name
FROM tasks t, task_dependencies td
WHERE td.dependencies_task_id = $task_id
	AND t.task_id = td.dependencies_req_task_id
";
$taskDep = db_loadHashList( $sql );

// setup the title block
$ttl = $task_id > 0 ? "Edit Task" : "Add Task";
$titleBlock = new CTitleBlock( $ttl, 'tasks.gif', $m, "$m.$a" );
$titleBlock->addCrumb( "?m=tasks", "tasks list" );
if ( $canReadProject ) {
	$titleBlock->addCrumb( "?m=projects&a=view&project_id=$task_project", "view this project" );
}
if ($task_id > 0)
  $titleBlock->addCrumb( "?m=tasks&a=view&task_id=$obj->task_id", "view this task" );
$titleBlock->show();

// Let's gather all the necessary information from the department table
// collect all the departments in the company
$depts = array( 0 => '' );

// ALTER TABLE `tasks` ADD `task_departments` CHAR( 100 ) ;
$company_id                = $project->project_company;
$selected_departments      = $obj->task_departments != "" ? explode(",", $obj->task_departments) : array();
$departments_count         = 0;
$department_selection_list = getDepartmentSelectionList($company_id, $selected_departments);
if($department_selection_list!=""){
	$department_selection_list = "<select name='dept_ids[]' size='$departments_count' multiple style='width:12em' class='text'>
								  $department_selection_list
    	                          </select>";
}

function getDepartmentSelectionList($company_id, $checked_array = array(), $dept_parent=0, $spaces = 0){
	global $departments_count;
	
	if($departments_count < 10) $departments_count++;
	$sql = "select dept_id, dept_name
	        from departments
	        where dept_parent      = '$dept_parent'
	              and dept_company = '$company_id'";
	$depts_list = db_loadHashList($sql, "dept_id");

	foreach($depts_list as $dept_id => $dept_info){
		$selected = in_array($dept_id, $checked_array) ? "selected" : "";

		$parsed .= "<option value='$dept_id' $selected>".str_repeat("&nbsp;", $spaces).$dept_info["dept_name"]."</option>";
		$parsed .= getDepartmentSelectionList($company_id, $checked_array, $dept_id, $spaces+5);
	}
	
	return $parsed;
}

//Dynamic tasks are by default now off because of dangerous behavior if incorrectly used
if ( is_null($obj->task_dynamic) ) $obj->task_dynamic = 0 ;

//Time arrays for selects
$isAMPMTimeFormat = stristr($AppUI->getPref('TIMEFORMAT'), "%p");
/* se suprime xq no se detecta cuando es am o pm en la hora */
$isAMPMTimeFormat = false;
$start = intval( substr($AppUI->getConfig('cal_day_start'), 0, 2 ) );
$end   = intval( substr($AppUI->getConfig('cal_day_end'), 0, 2 ) );
$inc   = $AppUI->getConfig('cal_day_increment');
if ($start === null ) $start = 8;
if ($end   === null ) $end = 17;
if ($inc   === null)  $inc = 15;
$hours = array();
for ( $current = $start; $current < $end + 1; $current++ ) {
	if ( $current < 10 ) { 
		$current_key = "0" . $current;
	} else {
		$current_key = $current;
	}
	
	if ( $isAMPMTimeFormat ){
		//User time format in 12hr
		$hours[$current_key] = ( $current > 12 ? $current-12 : $current );
	} else {
		//User time format in 24hr
		$hours[$current_key] = $current;
	}
}

$minutes = array();
$minutes["00"] = "00";
for ( $current = 0 + $inc; $current < 60; $current += $inc ) {
	$minutes[$current] = $current;
}
?>

<script src="lib/cpaint/cpaint2.inc.compressed.js" type="text/javascript"></script>
<script language="JavaScript"> 

function task (id,name,project,start_date,end_date,
				duration, duration_type, work,
				min_start_date, max_end_date, is_dynamic,
				is_milestone, task_parent, type, effort_driven,
				constraint_type, constraint_date){
	this.id              = id;
	this.name			 = name;
	this.project		 = project;
	this.start_date		 = start_date;
	this.end_date		 = end_date;
	this.duration		 = duration;
	this.duration_type	 = duration_type;
	this.work			 = work;
	this.min_start_date	 = min_start_date;
	this.max_end_date	 = max_end_date;
	this.is_dynamic		 = is_dynamic;
	this.is_milestone	 = is_milestone;
	this.task_parent	 = task_parent;
	this.dependences	 = new Array();
	this.resources		 = new Array();
	this.type			 = type;
	this.effort_driven	 = effort_driven;
	this.last_schedule_changes = new Array();
	this.constraint_type = constraint_type;
	this.constraint_date = constraint_date;
	
	this.addDependence = 
		function (id, name) {
			this.dependences[id] = name;
			/* hacer update dynamics */
		}
	this.delDependence = 
		function (id) {
			this.dependences.splice(id, 1);
			/* hacer update dynamics */
		}	
		
	this.addResource = 
		function (id, name, units, cost) {
			this.resources[id] = new resource(id,name,units, cost);
			/* hacer update dynamics */
		}
	this.editResource = 
		function (id, units){
			if (this.resources[id]) return;
			if (this.resources[id].units == units) return;
			this.resources[id].units = units;
			/* hacer update dynamics */
		}
	this.delResource = 
		function (id){
			this.resources.splice(id, 1);
			/* hacer update dynamics */
		}	
		
	this.changeDuration	=
		function (duration){
			if (this.duration == duration) return;
			this.duration = duration;
			/* hacer update dynamics */
		}
	this.changeDurationType = 
		function (duration_type){
			if (this.duration_type == duration_type) return;
			this.duration_type = duration_type;
			/* hacer update dynamics */
		}
	this.changeStartDate = 
		function (start_date){
			if (this.start_date == start_date) return;
			this.start_date = start_date;
			/* hacer update dynamics */
		}
	this.changeEndDate = 
		function (end_date){
			if (this.end_date == end_date) return;
			this.end_date = end_date;
			/* hacer update dynamics */
		}		
	this.changeWork = 
		function (work){
			if (this.work == work) return;
			this.work = work;
			/* hacer update dynamics */
		}	
	this.changeType = 
		function (type){
			if (this.type == type) return;
			this.type = type;
			/* hacer update dynamics */
		}	
	this.changeEffortDriven = 
		function (effort_driven){
			if (this.effort_driven == effort_driven) return;
			this.effort_driven = effort_driven;
			/* hacer update dynamics */
		}
}

function resource(id, name, units, cost){
	this.id = id;
	this.name = name;
	this.units = units;
	this.cost = cost;
}

var curtask = 
	new task (
		'<?php	echo $obj->task_id;?>',
		'<?php	echo $obj->task_name;?>',
		'<?php	echo $obj->task_project;?>',
		'<?php	echo $start_date?$start_date->format(FMT_TIMESTAMP):"";?>',
		'<?php	echo $end_date?$end_date->format(FMT_TIMESTAMP):"";?>',
		<?php	echo $obj->task_duration ? "$obj->task_duration" : "0";?>,
		<?php	echo $obj->task_duration_type ? "$obj->task_duration_type":"0";?>,
		<?php	echo $obj->task_work?"$obj->task_work":"0";?>,
		'<?php	echo ""/*min_start_date*/;?>',
		'<?php	echo ""/*max_end_date*/;?>',
		<?php	echo ($obj->task_dynamic!="0" ? "true":"false" );?>,		
		'<?php	echo $obj->task_parent;?>',
		'<?php	echo $obj->task_type;?>',
		<?php	echo ($obj->task_effort_driven ? "true":"false" );?>,
		'<?php	echo $obj->task_constraint_type;?>',
		'<?php	echo ($constraint_date ? 
							$constraint_date->format( FMT_TIMESTAMP ): 
							'');?>');

<?php
while(list($resource_id, $resource_row) = each($assigned)){?>
curtask.resources["<?php echo $resource_id?>"] = 
	new resource ("<?php echo $resource_id?>", 
					"<?php echo $users[$resource_id]?>",
					<?php echo $resource_row["user_units"]?>);
<?php } 
while(list($dep_id, $dep_name) = each($taskDep)){?>
curtask.dependences["<?php echo $dep_id?>"] = "<?php echo $dep_name?>";
<?php
}
?>							

/*
<?php var_dump($assigned);?>
*/	
var assigned = new Array();
var units = new Array();
var assignedid = new Array();
var users = new Array();
var usersid = new Array();
var cost = new Array();


<?php
$assigned_uid = array_keys($assigned);
for ($i = 0; $i < count($assigned); $i++){
	/*echo "assigned[".$assigned_uid[$i]."]='".$assigned[$assigned_uid[$i]]["user_first_name"]." ";
	echo $assigned[$assigned_uid[$i]]["user_last_name"]."';";*/
	echo "units[".$assigned_uid[$i]."]=".$assigned[$assigned_uid[$i]]["user_units"].";";
	echo "assignedid[$i]=".$assigned_uid[$i].";";
	echo "cost[".$assigned_uid[$i]."]=".$users_cost[$assigned_uid[$i]].";";
}

$users_ids = array_keys($users);
for ($i = 0; $i < count($users); $i++){
	echo "users[".$users_ids[$i]."]='".$users[$users_ids[$i]]."';";
	echo "usersid[$i]=".$users_ids[$i].";";
	echo "cost[".$users_ids[$i]."]='".$users_cost[$users_ids[$i]]."';";
}



?>
var calendarField = '';
var calWin = null;
var selected_contacts_id = "<?= $obj->task_contacts; ?>";
<? if ($canManageRoles){
	echo "var users_not_added = new Array();\n"; 
	if ( count($users_not_added) > 0 ){
		foreach ($users_not_added as $uid => $uname)
			echo "users_not_added[$uid]= '$uname';\n";}
			
	echo "var hollidays = new Array();\n";
	if ( count($holliday_list) > 0 ){	
		foreach ($holliday_list as $holliday )
			echo "hollidays[$holliday]= '1';\n";}			
}?>


function selectChange()
{
	var myEle;
	var x;
	var control = document.editFrm.resources;
	var unassigned;
	     
	for (var q=control.options.length; q>=0; q--) 
	{
	  	control.options[q]=null;
	}		

	//para cada uno de los usuarios disponibles
	for ( x = 0 ;x < usersid.length; x++ )
    {      
		
		unassigned = true;    	
		//Me fijo si el usuario ya est?asignado
		unassigned = !(units[usersid[x]]);
       
		if( unassigned )
		{
			myEle = new Option( users[usersid[x]], usersid[x] );
			control.options[control.length] = myEle;
		}

    }    
}

function refreshfilters()
{	
	var f = document.editFrm;
	var comand; 
	var element; 
	var text; 
	var uslist="";
	var utlist="";

	 var content = "";
  
  for(i=0;i<assignedid.length;i++)
  {
    if(assignedid[i]!=-1)
    {
      uslist = uslist + assignedid[i] + ",";
	  utlist = utlist + units[assignedid[i]] + ",";
    }
  }

  uslist = uslist.substr(0,uslist.length-1);
  utlist = utlist.substr(0,utlist.length-1);
  f.hassign.value=uslist;
  f.hunits.value=utlist;

  
  content = "<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" bgcolor=\"#ffffff\">" ;

  for(i=0;i<assignedid.length;i++)
  {
    if(assignedid[i]!=-1)
    {
      for(x=0;x<usersid.length;x++)
      {
        if(assignedid[i]==usersid[x])
        {
        	var coloruser = "";
          	if (units[assignedid[i]] > 100)
          		coloruser = ' style="color: #FF0000;"';

			content = content + "<tr" + coloruser + ">";
			content+= "<input type='hidden' name='user["+assignedid[i]+"]' value='"+assignedid[i]+"' />";
			content = content + "<td width=\"380px\">" + users[assignedid[i]]+ "</td>";
			content = content + "<td width=\"140px\" nowrap=\"nowrap\" align=\"right\"><input type='text' class='text' name='cost["+assignedid[i]+"]' value='"+cost[assignedid[i]]+"' size='3' disabled/></td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>";
			content = content + "<td width=\"100px\" nowrap=\"nowrap\" align=\"center\"><input type='text' class='text' name='units["+assignedid[i]+"]' value='"+units[assignedid[i]]+"' size='3' onchange=\"changeunits(this);\" "+coloruser+"/>%</td>";
			content = content + "<td width=\"50px\" align=\"center\"><a href='javascript:  //' onclick='javascript: removeuser(" + assignedid[i] + ")' alt=\"<?=$AppUI->_('delete')?>\"><img src=\"images/icons/trash.gif\" width=\"20\" height=\"20\" border=\"0\" alt=\"<?=$AppUI->_('delete')?>\"  /></a></td>";			
					
			content = content + "</tr>";
        }
      }
    }
  } 

	
  content = content + "</table>";
<? if ($canManageRoles){ ?>
	document.getElementById("taskusers").innerHTML = content;
<?php } ?>  
  

}

var sed_modif = new Array();


function calculate_fields(){
		var actions = new Array();
		actions["task_start_datetask_end_date"] = "update_duration";
		actions["task_end_datetask_start_date"] = "update_duration";
		actions["task_durationtask_end_date"] = "update_start_date";
		actions["task_end_datetask_duration"] = "update_start_date";
		actions["task_start_datetask_duration"] = "update_end_date";
		actions["task_durationtask_start_date"] = "update_end_date";
		var f = document.editFrm;
		var field_1 = eval('f.'+sed_modif[0]);
		var field_2 = eval('f.'+sed_modif[1]);
		var act_id = sed_modif[0] + sed_modif[1];
		if (field_1 && field_2 && actions[act_id]){
			execute_remote_script(actions[act_id]);
		}
}

function execute_remote_script(action){

	/*show_message("info", "<?php echo $AppUI->_('Checking data'); ?>", "<?php echo $AppUI->_("Wait a moment while the entered information is being checked."); ?>");*/

	    document.editFrm.btnFuseAction.disabled = true;


		var f = document.editFrm;
		var fme = document.getElementById("fmeSEDCalcs");
		var dl = f.task_dependencies.length -1;
		var dependencies = new Array();		
		var url = 'index.php?m=public&a=task_duration_calc&suppressHeaders=1&dialog=1&task_project=' + f.task_project.value;
		if ( fme ){
			url += '&action='+action;
			url += '&task_start_date='+f.task_start_date.value;
			url += f.start_hour.options[f.start_hour.selectedIndex].value;
			url += f.start_minute.options[f.start_minute.selectedIndex].value;
			url += '&task_end_date='+f.task_end_date.value;
			url += f.end_hour.options[f.end_hour.selectedIndex].value;
			url += f.end_minute.options[f.end_minute.selectedIndex].value;
			url += '&task_duration='+f.task_duration.value;
			url += '&task_duration_type='+f.task_duration_type.options[f.task_duration_type.selectedIndex].value;
			url += '&min_start_date='+f.min_start_date.value;
			url += '&max_end_date='+f.max_end_date.value;
			url += '&task_dynamic='+(f.task_dynamic.checked?f.task_dynamic.value:0);
			url += '&task_id=<?php echo $task_id?>';
			url += '&task_parent=';
			url += f.task_parent.options[f.task_parent.selectedIndex].value;
			
			for (dl; dl > -1; dl--){
				dependencies[dependencies.length] = f.task_dependencies.options[dl].value;
			}			
			url += '&dependencies=' + dependencies.join(",");
			
			for (var i = 0 ; i < assignedid.length; i++){
				url += '&units['+assignedid[i]+']=' + units[assignedid[i]];
			}
			url += '&task_type='+f.task_type.options[f.task_type.selectedIndex].value;
			url += '&task_effort_driven='+(f.task_effort_driven.checked?f.task_effort_driven.value:0);
			url += '&sed=' + sed_modif.join(",");
			url += '&task_work='+f.task_work.value;
			

			f.form_checked.value="0";
			fme.src=url;
			 
			document.editFrm.btnFuseAction.disabled = false;
		}

}

function calculate_dependencies(){
	execute_remote_script("add_del_dependencies");
}


function popConstraint(){
	var f = document.editFrm;
	var mandatory_constraint_dates = "<?php echo $mandatory_constraint_dates?>";
	var ctype = f.task_constraint_type.options[f.task_constraint_type.selectedIndex].value;
	
	if (mandatory_constraint_dates.indexOf(ctype) > -1 )
		popCalendar('constraint_date')


}
function changedconstrainttype(){
	var f = document.editFrm;
	var mandatory_constraint_dates = "<?php echo $mandatory_constraint_dates?>";
	var ctype = f.task_constraint_type.options[f.task_constraint_type.selectedIndex].value;

	if (mandatory_constraint_dates.indexOf(ctype) > -1 )
		f.constraint_date.disabled = false;
	else		
		f.constraint_date.disabled = true;


}

function getTSStartDate(){
	var f = document.editFrm;
	return f.task_start_date.value +
			f.start_hour.options[f.start_hour.selectedIndex].value +  
			f.start_minute.options[f.start_minute.selectedIndex].value + "00";

}
function getTSEndDate(){
	var f = document.editFrm;
	return f.task_end_date.value +
			f.end_hour.options[f.end_hour.selectedIndex].value +  
			f.end_minute.options[f.end_minute.selectedIndex].value+ "00";
}
function swap_changed_fields(field){
	
	var f = field.form;
	var tsstart = getTSStartDate();
	var tsend = getTSEndDate();
	var duration = f.task_duration.value;
	var duration_type = f.task_duration_type.options[f.task_duration_type.selectedIndex].value;					
	if(tsstart == curtask.start_date &&
		tsend == curtask.end_date &&
		duration == curtask.duration &&
		duration_type == curtask.duration_type)
		return;	
		
	if (sed_modif[0] && sed_modif[0] != field.name){
		sed_modif[1] = sed_modif[0];
	}
	sed_modif[0] = field.name;	
	
	curtask.start_date = tsstart;
	curtask.end_date = tsend;
	curtask.duration = duration;
	curtask.duration_type = duration_type;
	
	if (sed_modif.length == 2){		
		calculate_fields();
	}else{
		if (field.name=="task_duration"){
			execute_remote_script("update_end_date");
		}
		if (field.name=="task_start_date" || field.name=="task_end_date"){
			execute_remote_script("update_duration");
		}
	}
}

function update_field(field, value){	
	fld = eval( 'document.editFrm.'+field);
	fld.value = value;
	switch(field){
	case "task_start_date":
		curtask.start_date = getTSStartDate();
		break;
	case "task_end_date":
		curtask.end_date = getTSEndDate();
		break;	
	case "task_duration":
		curtask.duration = value;
		break;	
	case "task_work":
		curtask.work = value;
		break;			
	}	
}


function popContacts() {
	window.open('./index.php?m=public&a=contact_selector&suppressLogo=1&dialog=1&call_back=setContacts&company_id=<?php echo $company_id; ?>&selected_contacts_id='+selected_contacts_id, 'contacts','left=50,top=50,height=250,width=400,resizable,scrollbars=yes');
}

function popCalendar( field ){
	var form = document.editFrm;
	var is_milestone = form.task_milestone.checked;
	if (! is_milestone ||
			is_milestone &&  field.indexOf("end") == -1){
		calendarField = field;
		idate = eval( 'document.editFrm.task_' + field + '.value' );
		window.open( 'index.php?m=public&a=calendar&dialog=1&suppressLogo=1&callback=setCalendar&date=' + idate, 'calwin', 'top=250,left=250,width=250, height=220, scollbars=false' );
	}
}

/**
 *	@param string Input date in the format YYYYMMDD
 *	@param string Formatted date
 */
function setCalendar( idate, fdate ) {
/*	var changed = false;
	while (hollidays[idate]=="1"){
		idate = parseFloat(idate)+1;
	}*/
	fld_date = eval( 'document.editFrm.task_' + calendarField );
	fld_fdate = eval( 'document.editFrm.' + calendarField );
	fld_date.value = idate;
	fld_fdate.value = fdate;
	var changed = calendarField == "start_date" ? "start" : "end";
	swap_changed_fields(fld_date);
	//checkDates(changed);
	//calcDuration();
}

function isValidDate(strField){

    var bMDVok = true;
    var strMDVparam1 = eval( 'document.editFrm.' + strField );
    var strMDVparam2 = eval( 'document.editFrm.task_' + strField +'_format');
    var strMDVparam3 = eval( 'document.editFrm.task_' + strField );
    if (trim(strMDVparam1.value)!=""){
	    if(<?php echo $objManualDate->buildFunctionMDVJS(); ?>){
	    	if (strField == "start_date"){
	        	alert("<?php echo $AppUI->_('taskStartDateError'); ?>");
	    	}else{
	    		alert("<?php echo $AppUI->_('taskEndDateError'); ?>");
	    	}
	
	        bMDVok = false;
	    }
	        
    }
    return bMDVok;
}

function changeDate(field){
	
	if(isValidDate(field.name)){	
		//si posee valor
		if (trim(field.value)!=""){
				swap_changed_fields(eval( 'document.editFrm.task_' + field.name));

		}
	}
}

function changeWork(){
	var f = document.editFrm;
	if(curtask.work != f.task_work.value){
		curtask.work = f.task_work.value
		execute_remote_script("changed_work");
	}
}
function selectTime(fieldname, hour, minute){
	var f = document.editFrm;
	var cboHours = eval( 'document.editFrm.' + fieldname + '_hour' );
	var cboMinutes = eval( 'document.editFrm.' + fieldname + '_minute' );
		
	if (cboHours && cboMinutes){
		for(var i = 0; i<cboHours.options.length; i++){
			if (hour == cboHours.options[i].value){
				cboHours.selectedIndex = i;
				i = cboHours.options.length;
			}
		}
		for(var i = 0; i<cboMinutes.options.length; i++){
			if (minute == cboMinutes.options[i].value){
				cboMinutes.selectedIndex = i;
				i = cboMinutes.options.length;
			}
		}
		setAMPM(cboHours);				
	}
	
	if (fieldname=="start"){
		curtask.start_date = getTSStartDate();
	}else{
		curtask.end_date = getTSEndDate();	
	}

}

function getEditForm(){
	var f = document.editFrm;
	return f;
}

function setContacts(contact_id_string){
	if(!contact_id_string){
		contact_id_string = "";
	}
	document.editFrm.task_contacts.value = contact_id_string;
	selected_contacts_id = contact_id_string;
}

function checkunits(value){
	var ut = parseInt(value);
	if ( isNaN(ut) || ut <= 0 || ut > 100){
		if(ut > 100){
			alert("<?php echo $AppUI->_('taskUserOverallocated');?>");
			return true;
		}
		alert("<?php echo $AppUI->_('taskUserInvalidUnits');?>");
		return false;
	}else{
		return true;
	}
}


<?php
    //ingreso fecha manual
    echo $objManualDate->buildManualDateValidationJS();
?>

function submitIt(){
	var form = document.editFrm;
	//var fl = form.assigned.length -1;
	//var fh = form.assigned.length -1;
	var dl = form.task_dependencies.length -1;
	var msg = "";
	var rta=true;
	var rta1 = true;
	var mandatory_constraint_dates = "<?php echo $mandatory_constraint_dates?>";
	var valid_constraint_date = true;
    //ingreso fecha manual
    var bMDVok = true;
    var strMDVparam1 = null;
    var strMDVparam2 = null;
    var strMDVparam3 = null;
    //fin fecha manual



	var st = '';
	var et = '';
	st = form.task_start_date.value;
	st += form.start_hour.options[form.start_hour.selectedIndex].value;
	st += form.start_minute.options[form.start_minute.selectedIndex].value;
	et = form.task_end_date.value;
	et += form.end_hour.options[form.end_hour.selectedIndex].value;
	et += form.end_minute.options[form.end_minute.selectedIndex].value;

	
<? if ($canManageRoles){ ?>
	var i=0;
	for(i=0; i<assignedid.length && rta1; i++){
		if(assignedid[i]!=-1){
			var ut = units[assignedid[i]];
			rta1 = rta1 && checkunits(ut);
			rta1 = rta1;
			ut = null;
			if (users_not_added[assignedid[i]]){
				msg += users_not_added[assignedid[i]] + "\n";
			}
		}

	}	


/*	for (fh; fh > -1; fh--){
		if (users_not_added[form.assigned.options[fh].value]){
			msg += users_not_added[form.assigned.options[fh].value] + "\n";
		}
	}	
*/

	rta=true;
	if (msg.length > 0 ){
		rta=confirm ("<?=$AppUI->_("Do you want to add the following users to this project?");?>" + "\n" + msg);
	}
<? } ?>		

	var prio = parseFloat(form.task_priority.value);
	
    //ingreso fecha manual
    strMDVparam1 = form.start_date;
    strMDVparam2 = form.task_start_date_format;
    strMDVparam3 = form.task_start_date;
    if(<?php echo $objManualDate->buildFunctionMDVJS(); ?>){
        alert("<?php echo $AppUI->_('taskStartDateError'); ?>");
        strMDVparam1.focus();
        bMDVok = false;
    }

    strMDVparam1 = form.end_date;
    strMDVparam2 = form.task_end_date_format;
    strMDVparam3 = form.task_end_date;
    if(<?php echo $objManualDate->buildFunctionMDVJS(); ?>){
        alert("<?php echo $AppUI->_('taskEndDateError'); ?>");
        strMDVparam1.focus();
        bMDVok = false;
    }
    //fin ingreso fecha manual
    
    strMDVparam1 = form.constraint_date;
    strMDVparam2 = form.task_constraint_date_format;
    strMDVparam3 = form.task_constraint_date;
    if(<?php echo $objManualDate->buildFunctionMDVJS(); ?>){
        valid_constraint_date = false;
    }
        
	if (trim(form.task_name.value).length < 3) {
		alert( "<?php echo $AppUI->_('taskName');?>" );
		form.task_name.focus();
	}
	else if (!(prio >= 0 && prio <=1000)) {
		alert( "<?php echo $AppUI->_('taskValidPriority');?>" );
		form.task_priority.focus();
	}	
	else if (!rta){
		form.resources.focus();
	}

	else if (!rta1){
		form.resources.focus();
	}

	else if (!trim(form.task_start_date.value)) {
		alert( "<?php echo $AppUI->_('taskValidStartDate');?>" );

	}
	else if (!trim(form.task_end_date.value) ) {
		alert( "<?php echo $AppUI->_('taskValidEndDate');?>" );

	}

	
	else if (st > et){
		alert( "<?php echo $AppUI->_('taskValidEndDate');?>" );
	}
	
	else if (form.form_checked.value=="0"){
    	alert( "<?php echo $AppUI->_('taskFormCheckIncomplete');?>" );
    }
	else if (mandatory_constraint_dates.indexOf(form.task_constraint_type.options[form.task_constraint_type.selectedIndex].value) > -1 && !valid_constraint_date){
		alert( "<?php echo $AppUI->_('taskMandatoryConstraintDate');?>" );
    	show_tab('advanced');
       	strMDVparam1.focus();		
	}
	else {
/*		trim(form.hassign).value = "";
		for (fl; fl > -1; fl--){
			form.hassign.value = "," + form.hassign.value +","+ form.assigned.options[fl].value
		}*/

		
		trim(form.hdependencies).value = "";
		for (dl; dl > -1; dl--){
			form.hdependencies.value = "," + form.hdependencies.value +","+ form.task_dependencies.options[dl].value
		}

		if ( trim(form.task_start_date.value).length > 0 ) {
			form.task_start_date.value += form.start_hour.value + form.start_minute.value;
		}
		
		if ( trim(form.task_end_date.value).length > 0 ) {
			form.task_end_date.value += form.end_hour.value + form.end_minute.value;
		}
		
        //ingreso fecha manual
        if(bMDVok) form.submit();
	}
}

function adduser()
{	
	var f = document.editFrm;
	var is_milestone = f.task_milestone.checked;

	if (!is_milestone)
	if (f.resources.selectedIndex > -1){
		var id = f.resources.options[f.resources.selectedIndex].value;
		if ( ! checkunits(f.user_units.value) ){
			f.user_units.focus();
		}else{
		checkunits(f.user_units.value)
			if (id.length > 0){
				assignedid[assignedid.length] = id;
				units[id] = parseInt(f.user_units.value);
				refreshfilters();  	
				selectChange();
				execute_remote_script("changed_resources");
			}
		}
	}


}

function removeuser(id)
{
  for(i=0;i<assignedid.length;i++){
    if(assignedid[i] == id){ 
		assignedid[i] = -1; 
		assignedid.splice(i,1);
		units[id] = null;

	}
  }
  refreshfilters();
  selectChange( null );
  execute_remote_script("changed_resources");
}

function listProperties(obj, objName) {
    var result = "";
    for (var i in obj) {
        result += objName + "." + i + "=" + obj[i] + "\n <br>";
    }
    return result;
}

function changeunits(ut){
	if(! checkunits(ut.value)){
		ut.focus();
		return;
	} 

	eval(ut.name + " = ut.value");
	refreshfilters();  	
	execute_remote_script("changed_units");
}

function update_units(user, value){
	units[user]=value;
	refreshfilters();
}

function addUserold() {
	var form = document.editFrm;
	var fl = form.resources.length -1;
	var au = form.assigned.length -1;
	var users = "x";

	//build array of assiged users
	for (au; au > -1; au--) {
		users = users + "," + form.assigned.options[au].value + ","
	}

	//Pull selected resources and add them to list
	for (fl; fl > -1; fl--) {
		if (form.resources.options[fl].selected && users.indexOf( "," + form.resources.options[fl].value + "," ) == -1) {
			t = form.assigned.length
			opt = new Option( form.resources.options[fl].text, form.resources.options[fl].value );
			form.assigned.options[t] = opt
		}
	}
}

function removeUserold() {
	var form = document.editFrm;
	fl = form.assigned.length -1;

	for (fl; fl > -1; fl--) {
		if (form.assigned.options[fl].selected) {
			form.assigned.options[fl] = null;
		}
	}
}

function addTaskDependency() {
	var form = document.editFrm;
	var at = form.all_tasks.length -1;
	var td = form.task_dependencies.length -1;
	var tasks = "x";

	
		//build array of task dependencies
		for (td; td > -1; td--) {
			tasks = tasks + "," + form.task_dependencies.options[td].value + ","
		}

		//Pull selected resources and add them to list
		for (at; at > -1; at--) {
			if (form.all_tasks.options[at].selected 
				&& tasks.indexOf( "," + form.all_tasks.options[at].value + "," ) == -1
				&& at > 0) {
				

				t = form.task_dependencies.length
				opt = new Option( form.all_tasks.options[at].text, form.all_tasks.options[at].value );
				form.task_dependencies.options[t] = opt
			}
		}
		calculate_dependencies();
	
}

function removeTaskDependency() {
	var form = document.editFrm;
	td = form.task_dependencies.length -1;

	for (td; td > -1; td--) {
		if (form.task_dependencies.options[td].selected) {
			form.task_dependencies.options[td] = null;
		}
	}
	calculate_dependencies();
}

function setAMPM( field) {
	if (document.editFrm[field.name + "_ampm"]){
		if ( field.value > 11 ){
			document.editFrm[field.name + "_ampm"].value = "pm";
		} else {
			document.editFrm[field.name + "_ampm"].value = "am";
		}
	}
	//calcDuration();
}

var workHours = <?php echo $AppUI->getConfig( 'daily_working_hours' );?>;
var hourMSecs = 3600*1000;


function selectItem(cbo,valor){
	//alert("a seleccionar " + valor);
	for(var i=0; i<cbo.options.length; i++){
		//alert(cbo.options[i].value + "  comparado a " + valor);
		if (cbo.options[i].value == valor){
			cbo.selectedIndex=i;
			i=cbo.options.lenght;
		}
	}
}

function checkDates(changed){
	var form = document.editFrm;
	var st = '';
	var et = '';
	st = form.task_start_date.value;
	st += form.start_hour.options[form.start_hour.selectedIndex].value;
	st += form.start_minute.options[form.start_minute.selectedIndex].value;
	et = form.task_end_date.value;
	et += form.end_hour.options[form.end_hour.selectedIndex].value;
	et += form.end_minute.options[form.end_minute.selectedIndex].value;
	
	if (changed=="start"){
		if (st > et){
			form.task_end_date.value = form.task_start_date.value;
			form.end_date.value = form.start_date.value;
			form.end_hour.selectedIndex = form.start_hour.selectedIndex;
			form.end_minute.selectedIndex = form.start_minute.selectedIndex;
		}
	}else{
		if (st > et){
			alert( "<?php echo $AppUI->_('taskValidEndDate');?>" );
		}
	}
}

var task_data = new Array();

function cache_task_data(){
	var form = document.editFrm;
	task_data["task_duration"] = form.task_duration.value;
	task_data["task_duration_type"] = form.task_duration_type.selectedIndex;
	task_data["task_work"] = form.task_work.value;
	task_data["end_date"] = form.end_date.value;
	task_data["task_end_date"] = form.task_end_date.value;
	task_data["end_hour"] = form.end_hour.selectedIndex;
	task_data["end_minute"] = form.end_minute.selectedIndex;
<?php if ( $isAMPMTimeFormat ) {	?>
	task_data["end_hour_ampm"] = form.end_hour_ampm.value;
<?php }	?>	
	task_data["users"] = new Array();
	task_data["users"] = assignedid;	
}
function load_task_data(){
	var form = document.editFrm;
	form.task_duration.value = task_data["task_duration"];
	form.task_duration_type.selectedIndex = task_data["task_duration_type"];
	form.task_work.value = task_data["task_work"];
	form.end_date.value = task_data["end_date"];
	form.task_end_date.value = task_data["task_end_date"];
	form.end_hour.selectedIndex = task_data["end_hour"];
	form.end_minute.selectedIndex = task_data["end_minute"];
<?php if ( $isAMPMTimeFormat ) {	?>	
	form.end_hour_ampm.value = task_data["end_hour_ampm"];
<?php }	?>		
	assignedid = new Array();
	assignedid = task_data["users"];	
	refreshfilters();
	selectChange( null );	
}

function swapMilestone(){
	var form = document.editFrm;
	var is_milestone = form.task_milestone.checked;

	if ( is_milestone ){
		cache_task_data();
		assignedid = new Array();
		sed_modif[1] = "task_start_date";
		sed_modif[0] = "task_duration";
		form.task_duration.value = 0;
		changeDate(form.start_date);
		form.task_work.value = 0;
		refreshfilters();
		selectChange( null );
		
	}else{
		load_task_data();
		sed_modif[1] = "task_start_date";
		sed_modif[0] = "task_duration";
		changeDate(form.start_date);	
		execute_remote_script("changed_resources");
	}
	form.task_duration.disabled = is_milestone; 
	form.task_duration_type.disabled = is_milestone;
	form.task_work.disabled = is_milestone;
	form.end_date.disabled = is_milestone; 
	form.task_end_date.disabled = is_milestone; 
	form.end_hour.disabled = is_milestone; 
	form.end_minute.disabled = is_milestone; 	
	
//if (this.checked) changeDate(this.form.start_date);

}
</script>

<script language="JavaScript">
<!--
function disable(disableIt)
{
	document.editFrm.task_manual_percent_complete_2.disabled = disableIt;
}
//-->
</script>

<table border="0" cellpadding="4" cellspacing="0" width="100%" class="std">
<form name="editFrm" action="" method="post">
	<input name="dosql" type="hidden" value="do_task_aed" />
	<input name="task_id" type="hidden" value="<?php echo $task_id;?>" />
	<input name="task_project" type="hidden" value="<?php echo $task_project;?>" />
	<input name='task_contacts' type='hidden' value="<?php echo $obj->task_contacts; ?>" />
<tr>
	<td colspan="2" style="border: outset #eeeeee 1px;background-color:#<?php echo $project->project_color_identifier;?>" >
		<font color="<?php echo bestColor( $project->project_color_identifier ); ?>">
			<strong><?php echo $AppUI->_('Project');?>: <?php echo @$project->project_name;?></strong>
		</font>
	</td>
</tr>
<tr valign="top">
	<td colspan="100">
	
		<table cellspacing="2" cellpadding="0" border="0" width="98%" class="tableForm_bg">
		<tr>
			<!--<td align="right" nowrap="nowrap" style="font-weight: bold;"><?=$AppUI->_("Id")?>:</>-->
			<td> </td>
			<td><?=$task_wbs_prefix?><input type="hidden" class="text" name="task_wbs_number" value="<?=$obj->task_wbs_number?>" maxlength="5" size="5"<?= !$task_id ? " disabled" : ""?>></td>

			<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Status' );?>:</td>
			<td>
				<?php echo arraySelect( $status, 'task_status', 'size="1" class="text"', $obj->task_status, true );?>
			</td>
		</tr>		
		<tr>
			<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_('Task Name');?>:</td>
			<td>
			<input type="text" class="text" name="task_name" value="<?php echo dPformSafe( $obj->task_name );?>" size="40" maxlength="255" />*
			</td>	
			<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Expected Duration' );?>:</td>
			<td nowrap="nowrap" align="left">
				<input type="text" class="text" name="task_duration" maxlength="8" size="6" value="<?php echo $obj->task_duration!==NULL ? $obj->task_duration : 0;?>" onblur="swap_changed_fields(this);" <?php if($is_dynamic_task) echo "disabled"?> />
			<?php
				echo arraySelect( $durnTypes, 'task_duration_type', 'class="text" '.($is_dynamic_task? "disabled":"").' onchange="javascript: swap_changed_fields(this.form.task_duration);"', $obj->task_duration_type, true );
			?>
			</td>		
		</tr>
		</table>
		<?php
			// tabbed information boxes
			$tabBox = new CTabBox( "?m=$m&a=$a", "{$AppUI->cfg['root_dir']}/modules/tasks/", $tab );
			$tabBox->add( "javascript: show_tab('general');", 'General' );
			$tabBox->add( "javascript: show_tab('dependences');", 'Task Dependencies' );
			//$tabBox->add( "javascript: show_tab('resources');", 'Resources' );
			$tabBox->add( "javascript: show_tab('advanced');", 'Advanced' );
			$tabBox->showtabbuttons();		
		?>	
<table cellspacing="2" cellpadding="0" width="98%" class="tableForm_bg" style="border: 1px #222222 solid;">
<tr >
	<td height="60%" >
	<div style="overflow: auto; width: 100%; height: 320px; padding:0px; margin: 0px">
		
<?php /**********  Tab General ****************/ ?>		
	
<?php if ($canEditDetails)
{ 
	if ( $task_id )
	{		
		$task_wbs_prefix = $obj->getWBSPrefix();
	}	
	else
	{
		$task_wbs_prefix = "";
	}
	?>
<div name="tabgeneral" id="tabgeneral">	
<table cellspacing="2" cellpadding="0" border="0" width="98%" class="tableForm_bg">
<col width="15%"><col width="35%"><col width="15%"><col width="35%">
<tr>
	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Start Date' );?>:</td>
	<td align="left" nowrap="nowrap" >
		<input type="hidden" name="task_start_date_format" value="<?php echo $df;?>">
		<input type="hidden" name="task_start_date" value="<?php echo $start_date ? $start_date->format( FMT_TIMESTAMP_DATE ) : "" ;?>" />
		<input type="text" name="start_date" value="<?php echo $start_date ? $start_date->format( $df ) : "" ;?>" size="10" class="text" onblur="changeDate(this);" <?php if($is_dynamic_task) echo "disabled"?>/>
		<a href="#" onClick="<?php echo ($is_dynamic_task ? "":"popCalendar('start_date')")?>">
			<img src="./images/calendar.gif" width="24" height="12" alt="<?php echo $AppUI->_('Calendar');?>" border="0">
		</a>&nbsp;&nbsp;<?php
		echo arraySelect($hours, "start_hour",'size="1" '.($is_dynamic_task? "disabled":"").' onchange="checkDates(\'start\'); setAMPM(this); changeDate(this.form.start_date);" class="text"', $start_date ? $start_date->getHour() : $start )  . " : " ;
		echo arraySelect($minutes, "start_minute",'size="1" '.($is_dynamic_task? "disabled":"").' onchange="changeDate(this.form.start_date);" class="text"', $start_date ? $start_date->getMinute() : "0" ) ;
		if ( $isAMPMTimeFormat ) {
			echo '<input type="text" name="start_hour_ampm" value="' . ( $start_date ? $start_date->getAMPM() : ( $start > 11 ? "pm" : "am" ) ) . '" disabled="disabled" class="text" size="2" />';
		}
	?>
	</td>
	<?php 
		//si la tarea es nueva no muestro estas opciones
		if(isset($_GET['task_id'])) { 
			if($obj->task_id != $obj->task_parent) {
				$sql2 = "SELECT task_complete as task_parent_is_complete
						FROM tasks
						WHERE 
						task_id = ".$obj->task_parent;
				$vec2 = db_fetch_array(db_exec($sql2));
			} else 
				$vec2['task_parent_is_complete'] == '0';

		?>
			<td align="right" nowrap="nowrap" style="font-weight: bold;">
				<?php echo $AppUI->_( 'Progress' );?>:
			</td>
			<td><?php $obj->task_manual_percent_complete_select(TRUE); ?>
				<?php echo arraySelect( $percent, 'task_manual_percent_complete_2', 'size="1" class="text" '.($obj->task_complete ? 'disabled="disabled"' : ' ' ), $obj->task_manual_percent_complete ) . '%';?>
				<b><?php echo $AppUI->_( 'Task Complete' );?>:</b>
				<input type='checkbox' name='task_complete_2' value=<?php echo "'".$obj->task_complete."' ".
				($obj->task_complete ? 'checked' : ' ' )." ".
				($vec2['task_parent_is_complete'] ? 'disabled'  : '')."".
				($obj->task_complete_possible_get() ? '' : 'disabled'); ?> onclick='disable(this.checked)' >
			</td>
		<?php 
		} 
	?>
</tr>
<tr>
	<td   align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Finish Date' );?>:</td>
	<td align="left" nowrap="nowrap" colspan="1">
		<input type="hidden" name="task_end_date_format" value="<?php echo $df;?>">
		<input type="hidden" name="task_end_date" value="<?php echo $end_date ? $end_date->format( FMT_TIMESTAMP_DATE ) : '';?>" />
		<input type="text" name="end_date" value="<?php echo $end_date ? $end_date->format( $df ) : '';?>" size="10" class="text"  onblur="changeDate(this);" <?php if($is_dynamic_task) echo "disabled"?>/>
		<a href="#" onClick="<?php echo ($is_dynamic_task ? "":"popCalendar('end_date')")?>">
			<img src="./images/calendar.gif" width="24" height="12" alt="<?php echo $AppUI->_('Calendar');?>" border="0">
		</a>&nbsp;&nbsp;<?php
		echo arraySelect($hours, "end_hour",'size="1" '.($is_dynamic_task? "disabled":"").' onchange="checkDates(\'end\');setAMPM(this);changeDate(this.form.end_date);" class="text"', $end_date ? $end_date->getHour() : $end ) . " : " ;
		echo arraySelect($minutes, "end_minute",'size="1" '.($is_dynamic_task? "disabled":"").' class="text" onchange="changeDate(this.form.end_date);"', $end_date ? $end_date->getMinute() : "00" ) ;
		if ( $isAMPMTimeFormat ) {
			echo '<input type="text" name="end_hour_ampm" value="' . ( $end_date ? $end_date->getAMPM() : ( $end > 11 ? "pm" : "am" ) ) . '" disabled="disabled" class="text" size="2" />';
		}
	?>
	</td>
	
	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Priority' );?>:</td>
	<td nowrap="nowrap"><input type="text" name="task_priority" value="<?= $obj->task_priority?>" class="text" size="4" maxlength="4">*</td>		
</tr>		
<tr>
	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Work' );?>:</td>
	<td nowrap="nowrap" align="left">
		<input type="text" class="text" name="task_work"  value="<?php echo @$obj->task_work;?>" size="5" maxlength="10" <?php if($is_dynamic_task) echo "disabled"?> onblur="changeWork();" />&nbsp;<?php echo $AppUI->_( 'hours' );?>
	</td>
<?php if ($canEditEcValues){ ?>		
	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Target Budget' );?>&nbsp;<?php echo $dPconfig['currency_symbol'] ?>:</td>
	<td nowrap="nowrap" align="left">
		<input type="text" class="text" name="task_target_budget" value="<?php echo @$obj->task_target_budget;?>" size="10" maxlength="10" />
	</td>
<?php }else{ ?>
	<td colspan="2">&nbsp;</td>
<?php } ?>	
</tr>
<tr><td colspan="97"><hr noshade="noshade" size="1"></td></tr>

<tr>
	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_('Task Creator');?>:</td>
	<td colspan="1">
	<?php echo arraySelect( $users, 'task_owner', 'style="width: 250px;" class="text"', !isset($obj->task_owner) ? $AppUI->user_id : $obj->task_owner );?>
	</td>	

	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_('Task Visibility');?>:</td>
	<td colspan="1">
	<?php echo arraySelect( $task_access, 'task_access', 'class="text"', !is_null($obj->task_access) ? intval( $obj->task_access ) : $defaul_task_access , true );?>
	</td>	
</tr>	
<tr>
	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_('Web Address');?>:</td>
	<td colspan="3">
	<input type="text" class="text" name="task_related_url" value="<?php echo @$obj->task_related_url;?>" size="40" maxlength="255" />
	</td>	
</tr>


<tr><td colspan="97"><hr noshade="noshade" size="1"></td></tr>
</table>
<? } ?>
<?php if ($canManageRoles) {?>		
		<input type="checkbox" name="task_notify" value="1" <?php if($obj->task_notify!="0") echo "checked"?> /> <?php echo $AppUI->_( 'notifyChange' );?>
		<table cellspacing="0" cellpadding="0" border="0" width="100%" bgcolor="#ffffff" class="">
		
		<tr class="tableHeaderGral">
			<td align="center"><?php echo $AppUI->_( 'Resources' );?></td>
			<td width="100px" align="center">&nbsp;</td>
			<td width="10%" align="center"><?php echo $AppUI->_( 'Units' );?></td>
			<td width="50px">&nbsp;</td>
		</tr>
		<tr>
			<td>
			<?php echo arraySelect( $users, 'resources', 'style="width:250px" size="1" 	class="text"', null ); ?>
			</td>
			<td width="100px" align="center">&nbsp;</td>
			<td align="center"><input type="text" class="text" name="user_units" value="100" size="3" maxlength="3" />%</td>
			<td align="center"><input type="button" class="button" value=">" title="<?php echo $AppUI->_("Add");?>" onClick="adduser()" />
		</tr>
	
		<tr class="tableHeaderGral">
			<td align="center"><?php echo $AppUI->_( 'Assigned Users' );?></td>
			<td width="100px" align="center"><?php echo $AppUI->_( 'Cost' );?></td>
			<td width="20px" align="center"><?php echo $AppUI->_( 'Units' );?></td>
			<td width="50px">&nbsp;</td>
		</tr>
		<tr>
			<td colspan="4"><div id="taskusers" name="taskusers"></div>
			</td>
		</tr>
		</table>
<?php }?>
</div>		
<?php /********** Fin Tab General ****************/ ?>	

<?php /********** Tab Dependences ****************/ ?>
<div name="tabdependences" id="tabdependences">
<table cellspacing="2" cellpadding="0" border="0" width="98%" class="tableForm_bg">
<col width="100"><col width="85%">
<tr>
	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Task Parent' );?>:</td>
	<td >
		<?php echo arraySelect($possible_parents, 'task_parent', 'class="text" onchange="execute_remote_script(\'parent_change\');"',$task_parent); ?>
	</td>		
</tr>

<tr><td colspan="4"><hr noshade="noshade" size="1"></td></tr>

<tr>
	<td colspan="4">
		<table cellspacing="0" cellpadding="2" border="0">
			<tr>
				<td><?php echo $AppUI->_( 'All Tasks' );?></td>
				<td><?php echo $AppUI->_( 'Task Dependencies' );?></td>
			</tr>
			<tr>
				<td>
					<?php echo arraySelect( $possible_dependences, 'all_tasks', 'style="width:250px" size="10" class="text" multiple="multiple"', null ); ?>
				</td>
				<td>
					<?php echo arraySelect( $taskDep, 'task_dependencies', 'style="width:250px" size="10" class="text" multiple="multiple"', null ); ?>
				</td>
			</tr>
			<tr>
				<td align="right"><input type="button" class="button" value="&gt;" onClick="addTaskDependency()" /></td>
				<td align="left"><input type="button" class="button" value="&lt;" onClick="removeTaskDependency()" /></td>
			</tr>
		</table>	
	</td>

</tr>
</table>		
</div>
<?php /********** Fin Tab Dependences ****************/ ?>

<?php /********** Tab Resources ****************/ ?>
<div name="tabresources" id="tabresources">

</div>
<?php /********** Fin Tab Resources ****************/ ?>

<?php /********** Tab Advanced ****************/ ?>
<div name="tabadvanced" id="tabadvanced" >
<table cellspacing="2" cellpadding="0" border="0" width="98%" class="tableForm_bg">
<col width="15%"><col width="35%"><col width="15%"><col width="35%">
<tr>
	<td  align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Dynamic Task' );?>?</td>
	<td nowrap="nowrap" align="left">
		<input type="checkbox" name="task_dynamic" value="1" <?php if($obj->task_dynamic!="0") echo "checked"?> <?php if($is_dynamic_task) echo "disabled"?> />
		<?php if($is_dynamic_task){ ?>
			<a href="#" onclick='javascript: alert("alert", "<?php echo $AppUI->_( 'Alert!' );?>", "<?php echo $AppUI->_('This task must be dynamic because it has children. Therefore the start date, end date and duration can not be changed since they depends of its children.');?>"); '>
			<img src="./images/icons/log-alert.gif" alt="" border="0"></a>

		<?php } ?>
							
	</td>

	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Milestone' );?>?</td>
	<td >
		<input type="checkbox" value=1 name="task_milestone" <?php if($obj->task_milestone){?>checked<?php }?> onchange="swapMilestone();" />
	</td>		
</tr>

<tr><td colspan="97"><hr noshade="noshade" size="1"></td></tr>

<tr>
	<td  align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Task Type' );?>:</td>
	<td nowrap="nowrap" align="left">
		<?php echo arraySelect( $task_types, 'task_type', 'class="text" size="1"', @$obj->task_type, true ); ?>
	</td>

	<td align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Effort Driven' );?>:</td>
	<td nowrap="nowrap" align="left">
		<input type="checkbox" name="task_effort_driven" value="1" <?php if($obj->task_effort_driven!="0") echo "checked"?> />
	</td>
</tr>	

<tr>
	<td  align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Constraint Type' );?>:</td>
	<td nowrap="nowrap" align="left">
		<?php echo arraySelect( $task_constraints, 'task_constraint_type', 'class="text" size="1" onchange="javascript: changedconstrainttype(this);"', @$obj->task_constraint_type, true ); ?></td>
	<td  align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Constraint Date' );?>:</td>
	<td nowrap="nowrap" align="left">
	<input type="hidden" name="task_constraint_date_format" value="<?php echo $df;?>">
		<input type="hidden" name="task_constraint_date" value="<?php echo $constraint_date ? $constraint_date->format( FMT_TIMESTAMP_DATE ) : '';?>" />
		<input type="text" name="constraint_date" value="<?php echo $constraint_date ? $constraint_date->format( $df ) : '';?>" size="10" class="text"  onblur="changeDate(this);" />
		<a href="#" onClick="popConstraint();">
			<img src="./images/calendar.gif" width="24" height="12" alt="<?php echo $AppUI->_('Calendar');?>" border="0">
		</a>	

	</td>
</tr>

<tr><td colspan="97"><hr noshade="noshade" size="1"></td></tr>
		
<tr>
	<td valign="top" align="right" nowrap="nowrap" style="font-weight: bold;"><?php echo $AppUI->_( 'Description' );?>:</td>
	<td colspan="2">
		<textarea name="task_description" class="textarea" cols="60" rows="10" wrap="virtual"><?php echo @$obj->task_description;?></textarea>
	</td>
	<td valign="top">
	<?php
				
				// Let's check if the actual company has departments registered
				if($department_selection_list != ""){
					?>
							<?php echo $AppUI->_("Departments"); ?><br />
							<?php echo $department_selection_list; ?>
							<?php echo "<hr />"; ?>
					<?php
				}
				
				// Let's check if there are available contacts for this company
				$sql = "select c.company_name
				        from companies as c, tasks as t, projects as p
				        where t.task_id = $task_id
				              and t.task_project = p.project_id
				              and p.project_company = company_id";
				$company_name = db_loadResult($sql);
				
				if($department_selection_list != "" || !is_null($company_name) ) {
					echo "<input type='button' class='button' value='".$AppUI->_("Contacts")."' onclick='javascript:popContacts();' title=\"".$AppUI->_("Select contacts...")."\" />";
				}
			?>
	</td>	
</tr>
<?/*
<tr>
	<td align="right" nowrap="nowrap" style="font-weight: bold;">&nbsp;</td>
	<td colspan="3">
	<?php
				
				// Let's check if the actual company has departments registered
				if($department_selection_list != ""){
					?>
							<?php echo $AppUI->_("Departments"); ?><br />
							<?php echo $department_selection_list; ?>
							<?php echo "<hr />"; ?>
					<?php
				}
				
				// Let's check if there are available contacts for this company
				$sql = "select c.company_name
				        from companies as c, tasks as t, projects as p
				        where t.task_id = $task_id
				              and t.task_project = p.project_id
				              and p.project_company = company_id";
				$company_name = db_loadResult($sql);
				
				if($department_selection_list != "" || !is_null($company_name) ) {
					echo "<input type='button' class='button' value='".$AppUI->_("Contacts")."' onclick='javascript:popContacts();' title=\"".$AppUI->_("Select contacts...")."\" />";
				}
			?>
	</td>	
<tr>*/?>
<tr>
	<td colspan="4">
<?php
	$custom_fields = dPgetSysVal("TaskCustomFields");
	if ( count($custom_fields) > 0 ){
		//We have custom fields, parse them!
		//Custom fields are stored in the sysval table under TaskCustomFields, the format is
		//key|serialized array of ("name", "type", "options", "selects")
		//Ej: 0|a:3:{s:4:"name";s:22:"Quote number";s:4:"type";s:4:"text";s:7:"options";s:24:"maxlength="12" size="10"";} 
		if ( $obj->task_custom != "" || !is_null($obj->task_custom))  {
			//Custom info previously saved, retrieve it
			$custom_field_previous_data = unserialize($obj->task_custom);
		}
		
		$output = '<table cellspacing="0" cellpadding="2" border="0">';
		foreach ( $custom_fields as $key => $array) {
			$output .= "<tr colspan='3' valign='top' id='custom_tr_$key' >";
			$field_options = unserialize($array);
			$output .= "<td align='right' nowrap='nowrap' >". ($field_options["type"] == "label" ? "<strong>". $field_options['name']. "</strong>" : $field_options['name']) . ":" ."</td>";
			switch ( $field_options["type"]){
				case "text":
					$output .= "<td align='left'><input type='text' name='custom_$key' class='text'" . $field_options["options"] . "value='" . ( isset($custom_field_previous_data[$key]) ? $custom_field_previous_data[$key] : "") . "' /></td>";
					break;
				case "select":
					$output .= "<td align='left'>". arraySelect(explode(",",$field_options["selects"]), "custom_$key", 'size="1" class="text" ' . $field_options["options"] ,( isset($custom_field_previous_data[$key]) ? $custom_field_previous_data[$key] : "")) . "</td>";
					break;
				case "textarea":
					$output .=  "<td align='left'><textarea name='custom_$key' class='textarea'" . $field_options["options"] . ">" . ( isset($custom_field_previous_data[$key]) ? $custom_field_previous_data[$key] : "") . "</textarea></td>";
					break;
				case "checkbox":
					$options_array = explode(",",$field_options["selects"]);
					$output .= "<td align='left'>";
					foreach ( $options_array as $option ) {
						if ( isset($custom_field_previous_data[$key]) && array_key_exists( $option, array_flip($custom_field_previous_data[$key]) ) ) {
							$checked = "checked";
						} 
						$output .=  "<input type='checkbox' value='$option' name='custom_" . $key ."[]' class='text' style='border:0' $checked " . $field_options["options"] . ">$option<br />";
						$checked = "";
					}
					$output .= "</td>";
					break;
			}
			$output .= "</tr>";
		}
		$output .= "</table>";
		echo $output;
	}else{
		echo "&nbsp;";
	}
?>	
	</td>
</tr>
</table>

</div>
<?php /********** Fin Tab Advanced ****************/ ?>


</div>



<table border="0" cellspacing="0" cellpadding="3" width="100%">
<tr>
	<td height="40" width="35%">
		* <?php echo $AppUI->_( 'requiredField' );?>
	</td>
	<td height="40" width="30%">&nbsp;</td>
	<td  height="40" width="35%" align="right">
		<table>
		<tr>
			<td>
				<input class="button" type="button" name="cancel" value="<?php echo $AppUI->_('cancel');?>" onClick="javascript:if(confirm('<?php echo $AppUI->_('taskCancel');?>')){location.href = '?<?php echo $AppUI->getPlace();?>';}" />
			</td>
			<td>
				<input class="button" type="button" name="btnFuseAction" value="<?php echo $AppUI->_('save');?>" onClick="submitIt();" />
			</td>
		</tr>
		</table>
	</td>
</tr>
</table>
</td>
</tr>
</table>
<input type="hidden" name="hassign" />
<input type="hidden" name="hunits" />
<input type="hidden" name="hdependencies" />
<input type="hidden" name="min_start_date" value="" />
<input type="hidden" name="max_end_date" value="" />
<input type="hidden" name="form_checked" value="1" />
</form>
</td>
</tr>
<form name="msgFrm" method="POST" target="fmemsgWindow" action="./index.php?m=public&a=message_layer&dialog=1&suppressLogo=1">
<input type="hidden" name="title" />
<input type="hidden" name="message" />
<input type="hidden" name="type" />
</form> 
</table>
<? if (@$_GET["debuginteraction"] == "123"){ ?>
<iframe name="fmeSEDCalcs" id="fmeSEDCalcs" height="200" width="800" scrolling="auto" style="border: 1px; " 
<? } else { ?>
<iframe name="fmeSEDCalcs" id="fmeSEDCalcs" style="width:0px; height:0px; border: 0px" 
<? } ?>
src="./index.php?m=public&a=task_duration_calc&suppressHeaders=1&dialog=1&task_project=<?php echo $task_project?>">
</iframe>
<style type='text/css'><!--
#msgWindow{
	z-index: 1000;	
	position:absolute;	
	top:216px;	
	left:268px;	
	width:400px;	
	height:50px;	
	vertical-align: top;	
	margin-bottom: -100px;	
	visibility: visible;
}

#fmemsgWindow{	
	width:400px;	
	height:150px;	
	border: 0px;	
	visibility: visible;}
@media all {* html #content #fronttext {margin-top: 0;} }
--></style>	
<script language="JavaScript">
refreshfilters();
<? if ($canManageRoles){ ?>
selectChange();
<? } ?>

  /* dimX = (document.all)? document.body.offsetWidth-20 : window.innerWidth+4-16
   dimY = (document.all)? document.body.innerHeight-4 : window.innerHeight+4 */
var dimY = ( document.body.innerHeight ) ? document.body.innerHeight : 480;
var dimX = ( document.body.offsetWidth ) ? document.body.offsetWidth : document.body.innerWidth;    
dimX -= 20;
dimY += 4;
   cntX = parseInt(dimX/2)
   cntY = parseInt(dimY/2)
   document.write("<style type='text/css'>")
   document.write("#msgWindow{z-index: 100; position:absolute; top:0px; left:0px; width:400px; height:50px;vertical-align: top; margin-bottom: -100px;}")
   document.write("#msgWindow{z-index: 1000;	position:absolute;	top:266px;	left:268px;	width:400px;	height:50px;	vertical-align: top;	margin-bottom: -100px;	visibility: visible;}");
   document.write("@media all {* html #content #fronttext {margin-top: 0;} }");
   document.write("</style>")
   
  function show_message(type, title, message){
   	<?php 
   		/*var div_msg = document.getElementById("msgWindow");
   		var spn_title = document.getElementById("msgWindowTitle");
   		var spn_message = document.getElementById("msgWindowMessage");
   		spn_title.innerHTML = title;
   		spn_message.innerHTML = message;*/

  		/*var fme_msg = document.getElementById("fmemsgWindow");
		alert (encodeBase64(message));
   		fme_msg.src = "./index.php?m=public&a=message_layer&dialog=1&suppressLogo=1&type="+type+"&title="+title+"&message="+encodeBase64(message);*/
 
?>   		
		var f = document.msgFrm;
		f.type.value = type;
		f.title.value = title;
		f.message.value = message;
		f.submit();

   		var div_msg = document.getElementById("msgWindow");
   		div_msg.style.top = (dimY - 50) / 2 +"px";
   		div_msg.style.left = (dimX - 400) / 2 +"px";
   		div_msg.style.display='';
   }
   
   function hide_message(){
   		document.getElementById('msgWindow').style.display='none';
   		var fme_msg = document.getElementById("fmemsgWindow");
   		fme_msg.src = "./index.php?m=public&a=message_layer&dialog=1&suppressLogo=1&type=info&title=&message=";   	

   }
   
   function show_tab(name){
   		document.getElementById('tabgeneral').style.display='none';
   		document.getElementById('tabdependences').style.display='none';
   		document.getElementById('tabresources').style.display='none';
   		document.getElementById('tabadvanced').style.display='none';
   		
   		document.getElementById('tab' + name).style.display='';
   }
   
  </script>
    <div name="msgWindow" id="msgWindow">  
	 <iframe name="fmemsgWindow" 
  			id="fmemsgWindow" 
  			scrolling="no" 
  			 marginheight="0"
  			 marginwidth="0"
  			 frameborder="0"
  		   src="./index.php?m=public&a=message_layer&dialog=1&suppressLogo=1"   
  			style="border:0px; background-color: #eeeeee;"></iframe>   
  </div> 
<script><!--
show_tab('general');
changedconstrainttype();
cache_task_data();
//show_message("info", "<?php echo $AppUI->_("Loading") ?>", "<?php echo $AppUI->_("Wait a moment while task data is being loaded.") ?>");
//--></script>
